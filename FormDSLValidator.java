/*
 * generated by Xtext 2.24.0
 */
package form.validation;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.xtext.validation.Check;

import form.formDSL.Expression;
import form.formDSL.Focus;
import form.formDSL.Form;
import form.formDSL.FormDSLPackage;
import form.formDSL.Input;
import form.formDSL.Optional;

/**
 * This class contains custom validation rules.
 *
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class FormDSLValidator extends AbstractFormDSLValidator {

	int focusTags;
	int optionalTags;
	
	/* 
	 * Ensures that all forms must have atleast one input
	 * As a form with no inputs make no sense to have.
	 */
	@Check
	public void checkFormHasInputs(Form form) {
		focusTags = 0;
		if (form.getContent().size() == 0) {
			error("A form should have input fields, use: shortText, LongText, number, email, date or money to get started.",
					FormDSLPackage.Literals.FORM__CONTENT);
		}
	}
	
	/* 
	 * Checks that all inputs have a name
	 */
	@Check
	public void checkInputHasName(Input input) {
		optionalTags = 0;
		if (input.getName() == null) {
			error("Input must have a name specified within ''.", FormDSLPackage.Literals.INPUT__NAME);
		}
	}
	
	/*
	 * Checks if the name of an input is not an empty string '', 
	 * and if the first letter in the name is not a capital letter
	 */
	@Check
	public void checkInputNameNotEmpty(Input input) {
		if (input.getName().getText().isEmpty()) {
			error("Input name should not be empty", FormDSLPackage.Literals.INPUT__NAME);
		} else {
			if (!Character.isUpperCase(input.getName().getText().charAt(0))) {
				warning("Input Name should start with a capital letter", FormDSLPackage.Literals.INPUT__NAME);
			}
		}
	}

	
	/* 
	 * Ensures that if multiple focus expressions are used that the second one has a warning of overwriting
	 * The first one
	 */
	@Check
	public void checkFocusOverwrite(Focus focus) {
		if (focusTags > 0) {
			warning("This focus expression overwrites earlier focus expression",
					FormDSLPackage.Literals.FOCUS__TEXT);
		}
		focusTags++;
	}

	/*
	 * Ensures that if multiple optional exressions occur in the same input that all but the first ones contain
	 * an error
	*/
	@Check
	public void checkMultipleOptionalTags(Optional opt) {
		if (optionalTags > 0) {
			error("Optional already specified", FormDSLPackage.Literals.OPTIONAL__TEXT);
		}
		optionalTags++;
	}

}
