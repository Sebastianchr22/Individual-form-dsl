/*
 * generated by Xtext 2.24.0
 */
package form.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import java.util.List
import form.formDSL.Form
import form.formDSL.Input
import form.formDSL.Name
import form.formDSL.Type
import form.formDSL.Expression
import form.formDSL.Generic
import form.formDSL.LongText
import form.formDSL.Money
import form.formDSL.ShortText
import form.formDSL.Optional
import form.formDSL.Focus
import form.formDSL.Length
import form.formDSL.Is
import form.formDSL.GreaterThanInclusive
import form.formDSL.LessThanInclusive
import form.formDSL.LessThan
import form.formDSL.GreaterThan
import form.formDSL.Exactly
import form.formDSL.Not
import form.formDSL.Plus
import form.formDSL.Minus
import form.formDSL.Mult
import form.formDSL.Div
import form.formDSL.Num

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class FormDSLGenerator extends AbstractGenerator {

	var formClass = "form-control form-control-sm"
	var isRequired = true;
	var hasFocus = false;
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val form = resource.allContents.filter(Form).next
		fsa.generateFile("formPage.html", form.compilePage);
	}
	
	
	
	/* Handles creating the initial form, and computing all input fields */
	def CharSequence compilePage(Form form) {
		'''
			«startHTML()»
			
			<form onSubmit="submitHandler(event)">
				«FOR input : form.content»
					«input.generateHTML»
				«ENDFOR»
				<br>
				<input type="submit" class="btn btn-primary" value="Submit" onclick="submitHandler(event)">
				<p style="color:red" id="error_output"></p>
			</form>
			
			«form.compilejs»
			«endHTML»
		'''
	}
	

	/* Used to handle creating label associated with the input field (generated later) */
	def dispatch CharSequence generateHTML(Input input) {
		'''
			<label class="form-label">«input.name.generateHTML»:</label>
			«generateHTML(input.type, input.name)»
		'''
	}


	/* Handles creation of input html */
	def dispatch CharSequence generateHTML(Generic type, Name name) {
		'''<input class="«formClass»" type="«type.text»" id="«name»" placeholder="«name.text»">'''
	}
	def dispatch CharSequence generateHTML(LongText type, Name name) {
		'''<textarea class="«formClass»" id="«name»" rows="8" cols="50" placeholder="«name.text»"></textarea>'''
	}
	def dispatch CharSequence generateHTML(Money type, Name name) {
		'''<input class="«formClass»" type="number" min="0.00" max="10000.00" step="0.01" placeholder="0.00" id="«name»">'''
	}
	def dispatch CharSequence generateHTML(ShortText type, Name name) {
		'''<input class="«formClass»" type="text" id="«name»" placeholder="«name.text»">'''
	}
	def dispatch CharSequence generateHTML(Name name) {
		name.text
	}
	def dispatch CharSequence generateHTML(Type type) {
		type.text
	}



	/* Handle (optional) Expressions */
	def dispatch CharSequence handleExp(Optional exp, Name name){
		isRequired = false
		'''
		'''
	}
	def dispatch CharSequence handleExp(Focus exp, Name name){
		hasFocus = true
		'''
		'''
	}
	def dispatch CharSequence handleExp(Is exp, Name name){
		'''
		if(!(document.getElementById("«name»").value «exp.comp.getCompText» «exp.value.computeMath»)){
			console.log("«name.text» property failed: " + document.getElementById("«name»").value);
			document.getElementById("error_output").innerHTML = "'«name.text»' field was incorrent, '«name.text»' must be «exp.comp.getCompText» «exp.value.computeMath»";
			failedProperty = true;
		}
		'''
		//Find a way to generate simple verification method in JS for this property related to the input.
	}
	def dispatch CharSequence handleExp(Length exp, Name name){
		'''
		if(!(document.getElementById("«name»").value.length «exp.comp.getCompText» «exp.value.computeMath»)){
			console.log("«name.text» property failed: " + document.getElementById("«name»").value.length);
			document.getElementById("error_output").innerHTML = "'«name.text»' field was wrong, '«name.text»' length must be «exp.comp.getCompText» «exp.value.computeMath»";
			failedProperty = true;
		}
		'''
	}
	
	/* Handling comparison operators */
	def dispatch CharSequence getCompText(GreaterThan comp) {
		'''>'''
	}
	def dispatch CharSequence getCompText(GreaterThanInclusive comp) {
		'''>='''
	}
	def dispatch CharSequence getCompText(LessThan comp) {
		'''<'''
	}
	def dispatch CharSequence getCompText(LessThanInclusive comp) {
		'''<='''
	}
	def dispatch CharSequence getCompText(Exactly comp) {
		'''=='''
	}
	def dispatch CharSequence getCompText(Not comp) {
		'''!='''
	}

	
	/* Handling math expressions */
	def float computeMath(Expression exp){
		switch exp{
			Plus: exp.left.computeMath + exp.right.computeMath
			Minus: exp.left.computeMath - exp.right.computeMath
			Mult: exp.left.computeMath * exp.right.computeMath
			Div: exp.left.computeMath / exp.right.computeMath
			Num: exp.value
		}
	}




	/* Handling creating the JS and HTML required */
	def CharSequence compilejs(Form form) {
		var List<String> validators = newArrayList
		'''
			<script>
			//Set focus and required attributes to inputs
			«FOR input : form.content»
				«FOR exp : input.expression»
					«isRequired = true»
					«hasFocus = false»
					//«validators.add(exp.handleExp(input.name).toString)»
				«ENDFOR»

				«IF isRequired»
					document.getElementById("«input.name»").required = true;
				«ENDIF»
				«IF hasFocus»
					document.getElementById("«input.name»").focus();
				«ENDIF»
			«ENDFOR»
			
			function submitHandler(e){
				console.log("Called submit!");
				var failedProperty = false;
				//When submit
					//foreach expression
					«FOR validation : validators»
						«validation»
					«ENDFOR»
					if (failedProperty){
						console.log("Form has failed properties...");
						e.preventDefault();
						return false;
					}else{
						//Submit
						document.getElementById("error_output").innerHTML = ""
						console.log("Submit!");
						return true;
					}
			}
			</script>
		'''
	}

	def CharSequence startHTML() {
		'''
			<!DOCTYPE html>
			<html>
				<head>
				<style>
				input{
					height:45px;
					width:100%;
				}
				</style>
				<title>Form page demo</title>
				
				<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-eOJMYsd53ii+scO/bJGFsiCZc+5NDVN2yr8+0RDqr0Ql0h+rP48ckxlpbzKgwra6" crossorigin="anonymous">
				<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js" integrity="sha384-JEW9xMcG8R+pH31jmWH6WWP0WintQrMb4s7ZOdauHnUtxwoG2vI5DkLtS3qm9Ekf" crossorigin="anonymous"></script>
				
				</head>
			<body style="background-color:#FEFEFE">
			    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js" integrity="sha384-JEW9xMcG8R+pH31jmWH6WWP0WintQrMb4s7ZOdauHnUtxwoG2vI5DkLtS3qm9Ekf" crossorigin="anonymous"></script>
				<div style="margin:0 auto; width: 38%; background-color:#FFF; padding:5%; padding-top:6%">
		'''
	}

	def CharSequence endHTML() {
		'''
				</div>
			</body>
			</html>
		'''
	}
}
